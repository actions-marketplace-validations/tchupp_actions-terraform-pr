name: 'Terraform PR'
description: 'GitHub Action for adding `terraform plan` output as a PR comment'
branding:
  icon: 'package'
  color: 'blue'
inputs:
  github-token:
    description: "secrets.GITHUB_TOKEN"
    required: true
  default-branch:
    description: "Default branch of the repository. Defaults to 'main' if not specified."
    required: false
    default: "main"
runs:
  using: "composite"
  steps:
    - name: Terraform Format
      id: fmt
      shell: bash
      continue-on-error: true
      run: |
        terraform fmt -check

    - name: Terraform Init
      id: init
      shell: bash
      timeout-minutes: 2
      run: |
        terraform init

    - name: Terraform Workspace
      id: workspace
      shell: bash
      run: |
        terraform workspace show

    - name: Terraform Plan
      id: plan
      shell: bash
      continue-on-error: true
      if: github.ref != 'refs/heads/${{ inputs.default-branch }}'
      run: |
        terraform plan -no-color

    - name: Create/Update Comment
      uses: actions/github-script@v4
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}\n${{ steps.plan.outputs.stderr }}"
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const tag = ${{ steps.workspace.outputs.stdout }}
          const output = `
          ### Terraform Status ${tag}
          #### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`
          <details>
          <summary>Show Plan</summary>
          \`\`\`${process.env.PLAN}\`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*
          `;
          if (!context || !context.issue || !context.issue.number) {
            return;
          }
          const comments = await github.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          const githubActionsBotComment = comments.data.find(comment =>
            comment.user.login === 'github-actions[bot]' &&
             comment.body.includes(`### Terraform Status ${tag}`)
          );
          if (output.includes("No changes.")) {
            if (githubActionsBotComment) {
              await github.issues.deleteComment({
                comment_id: githubActionsBotComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
              })
            }
          } else {
            if (githubActionsBotComment) {
              await github.issues.updateComment({
                comment_id: githubActionsBotComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output,
              })
            } else {
              await github.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output,
              })
            }
          }

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      shell: bash
      run: |
        echo "${{ steps.plan.outputs.stdout }}"
        echo "${{ steps.plan.outputs.stderr }}"
        exit 1
