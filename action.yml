name: 'GitHub Action for adding Terraform output to PR comments'
description: 'Provides a feedback loop for PRs'
branding:
  icon: 'package'
  color: 'blue'
inputs:
  github-token:
    description: "secrets.GITHUB_TOKEN"
    required: true
runs:
  using: "composite"
  steps:
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      shell: bash
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init
      shell: bash

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      shell: bash
      continue-on-error: true

    - name: Create/Update Comment
      uses: actions/github-script@0.9.0
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const output = `
          ### Terraform Status
          #### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`
          <details>
          <summary>Show Plan</summary>

          \`\`\`${process.env.PLAN}\`\`\`
          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*
          `;

          if (context.issue.number) {
            const comments = await github.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const githubActionsBotComment = comments.data.find(comment => comment.user.login === 'github-actions[bot]');

            if (githubActionsBotComment) {
              await github.issues.updateComment({
                comment_id: githubActionsBotComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            } else {
              await github.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
          }
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
      shell: bash
