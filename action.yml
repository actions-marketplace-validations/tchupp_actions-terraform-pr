name: 'Terraform PR'
description: 'GitHub Action for adding `terraform plan` output as a PR comment'
branding:
  icon: 'package'
  color: 'blue'
inputs:
  github-token:
    description: "secrets.GITHUB_TOKEN"
    required: true
  apply-branch:
    description: "Branch to run `terraform apply` on. Leave blank to disable auto-apply."
    required: false
    default: ""
  path:
    description: "Path to the Terraform configuration. Defaults to '.' if not specified."
    required: false
    default: "."
runs:
  using: "composite"
  steps:
    - name: Terraform Format
      id: fmt
      shell: bash
      run: |
        cd ${{ inputs.path }}
        if terraform fmt -check; then
          echo "::set-output name=fmt-outcome::success"
        else
          echo "::set-output name=fmt-outcome::failure"
        fi

    - name: Terraform Init
      id: init
      shell: bash
      run: |
        cd ${{ inputs.path }}
        terraform init

    - name: Terraform Workspace
      id: workspace
      shell: bash
      run: |
        cd ${{ inputs.path }}
        terraform workspace show

    - name: Terraform Plan
      id: plan
      shell: bash
      run: |
        if [[ '${{ github.ref }}' != 'refs/heads/${{ inputs.apply-branch }}' ]]; then
          cd ${{ inputs.path }}
          if terraform plan -no-color; then
            echo "::set-output name=plan-outcome::success"
          else
            echo "::set-output name=plan-outcome::failure"
          fi
        fi

    - name: Create/Update Comment
      uses: actions/github-script@v4
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}\n${{ steps.plan.outputs.stderr }}"
        TF_WORKSPACE: "${{ steps.workspace.outputs.stdout }}"
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const tag = process.env.TF_WORKSPACE;
          const output = `
          ### Terraform Status ${tag}
          #### Terraform Format and Style ðŸ–Œ \`${{ steps.fmt.outputs.fmt-outcome }}\`
          #### Terraform Plan ðŸ“– \`${{ steps.plan.outputs.plan-outcome }}\`
          <details>
          <summary>Show Plan</summary>
          \`\`\`${process.env.PLAN}\`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*
          `;

          if (!context || !context.issue || !context.issue.number) {
            return;
          }

          const comments = await github.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          const githubActionsBotComment = comments.data.find(comment =>
            comment.user.login === 'github-actions[bot]' &&
             comment.body.includes(`### Terraform Status ${tag}`)
          );

          if (output.includes("No changes.")) {
            if (githubActionsBotComment) {
              await github.issues.deleteComment({
                comment_id: githubActionsBotComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
              })
            }
          } else {
            if (githubActionsBotComment) {
              await github.issues.updateComment({
                comment_id: githubActionsBotComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output,
              })
            } else {
              await github.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output,
              })
            }
          }

    - name: Terraform Plan Status
      shell: bash
      run: |
        if [[ '${{ steps.plan.outputs.plan-outcome }}' == 'failure' ]]; then
          echo "${{ steps.plan.outputs.stdout }}"
          echo "${{ steps.plan.outputs.stderr }}"
          exit 1
        fi

    - name: Terraform Apply
      shell: bash
      run: |
        if [[ '${{ github.ref }}' == 'refs/heads/${{ inputs.apply-branch }}' ]]; then
          cd ${{ inputs.path }}
          terraform apply -auto-approve
        fi
